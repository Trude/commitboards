#!/usr/bin/env ruby

# ruby 1.9 and 2.0 struggles with encoding issues on
# shells that have US-ASCII encoding and not UTF-8.
# The following lines is a fix
if RUBY_VERSION.start_with?('1.9') || RUBY_VERSION.start_with?('2.0')
  Encoding.default_external = Encoding::UTF_8
  Encoding.default_internal = Encoding::UTF_8
end

require 'fileutils'

class Capturer
  def initialize
    @project_dir          = `git rev-parse --show-toplevel 2>&1`.strip
    @project_name         = ENV['project_name'] || @project_dir.split(File::SEPARATOR).last

    @home_dir             = File.expand_path('~')
    @cb_dir               = File.join(@home_dir, '.commitboards')
    @cb_bin_dir           = File.join(@cb_dir, 'bin')
    @imagesnap_executable = File.join(@cb_bin_dir, 'imagesnap')
    @cb_executable        = File.join(@cb_bin_dir, 'capture')
    @cb_projects_dir      = File.join(@cb_dir, 'projects')
    @version_file         = File.join(@cb_bin_dir, 'version')
    @cb_project_dir       = ensure_dir_present(File.join(@cb_projects_dir, @project_name))
    @board_url            = ENV['board_url'] || exit('No board url given')
    @token                = ENV['token']     || exit('No token given')
    @commits_url          = "#{@board_url}/commits"
  end

  def capture
    commit_sha = get_last_commit_sha
    capture_tmp_image(commit_sha)
    upload_success = upload(commit_sha)
    if upload_success
      upload_previous_captures
    end
  end

private

  def version
    File.read(@version_file).strip
  end

  def get_last_commit_sha
    `git rev-parse HEAD`.strip
  end

  def capture_tmp_image(commit_sha)
    inside_dir @cb_project_dir do
      `#{@imagesnap_executable} -q -w 1 #{snapshot_filename(commit_sha)}`
    end
  end

  def upload(commit_sha)
    message = get_commit_message_for(commit_sha)
    commit_timestamp = get_commit_timestamp_for(commit_sha)
    upload_success = post_request(
      :commit_sha   => commit_sha,
      :project_name => @project_name,
      :github_path  => get_github_path,
      :message      => message,
      :timestamp    => commit_timestamp,
      :user_board_token => @token
    )

    clean_uploaded_file(commit_sha) if upload_success

    upload_success
  end

  def get_commit_timestamp_for(commit_sha)
    timestamp_str = `git show -s --format=%ct #{commit_sha}`.strip
  end

  def get_commit_message_for(commit_sha)
    message = `git log --format=%B -n 1 #{commit_sha}`.strip
  end

  def get_github_path
    remotes = `git remote -v`.strip
    return unless remotes =~ /origin\s+(?:git@github\.com:|https:\/\/github\.com\/)(\S+)\.git/
    $1
  end

  def post_request(opts)
    inside_dir @cb_project_dir do
      message          = shellescape opts.fetch(:message)
      project_name     = shellescape opts.fetch(:project_name)
      github_path      = shellescape opts.fetch(:github_path)
      commit_sha       = opts.fetch(:commit_sha)
      timestamp        = opts.fetch(:timestamp)
      user_board_token = shellescape opts.fetch(:user_board_token)
      filename         = shellescape snapshot_filename(commit_sha)

      upload_response = `curl #{http_proxy_settings} #{script_version_header} -s -F commit[user_board_token]=#{user_board_token} -F commit[sha]=#{commit_sha} -F commit[project]=#{project_name} -F commit[github_path]=#{github_path} -F commit[timestamp]=#{timestamp} -F commit[message]=#{message} -F commit[image]=@#{filename} #{@commits_url}`

      if upload_response == 'ok'
        puts "Uploaded #{commit_sha} to #{@commits_url}"
        return true
      else
        puts "Could not upload #{commit_sha} to #{@commits_url} (got code: #{$?} and response: '#{upload_response}')"
        return false
      end
    end
  end

  def script_version_header
    "--header 'X-script-version: #{version}'"
  end

  def upload_previous_captures
    Dir[File.join(@cb_project_dir, '*.jpg')].sort do |f1, f2|
      File.ctime(f1) <=> File.ctime(f2) # sort by date
    end.each do |filename|
      commit_sha = commit_sha_from_filename(filename)
      upload(commit_sha)
    end
  end

  def snapshot_filename(commit_sha)
    "#{commit_sha}.jpg"
  end

  def commit_sha_from_filename(filename)
    filename.match(/([0-9a-f]{40})\.jpg/).captures.first
  end

  def clean_uploaded_file(commit_sha)
    inside_dir @cb_project_dir do
      FileUtils.rm snapshot_filename(commit_sha)
    end
  end

  def ensure_dir_present(path)
    FileUtils.mkdir_p(path) unless File.directory?(path)
    path
  end

  def inside_dir(dirname)
    start_dir = FileUtils.pwd
    FileUtils.cd(dirname)
    begin
      yield
    ensure
      FileUtils.cd(start_dir)
    end
  end

  <%= render 'http_proxy_settings_method.rb.erb' %>
  <%= render 'shellescape_method.rb.erb' %>
end

Capturer.new.capture
