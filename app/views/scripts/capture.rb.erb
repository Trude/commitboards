#!/usr/bin/env ruby

require 'fileutils'

class Capturer
  def initialize
    @project_dir          = `git rev-parse --show-toplevel 2>&1`.strip
    @commit_sha           = `git rev-parse HEAD`.strip
    @snapshot_filename    = "#{@commit_sha}.jpg"
    @project_name         = ENV['project_name'] || @project_dir.split(File::SEPARATOR).last

    @home_dir             = File.expand_path('~')
    @cb_dir               = File.join(@home_dir, '.commitboards')
    @cb_bin_dir           = File.join(@cb_dir, 'bin')
    @imagesnap_executable = File.join(@cb_bin_dir, 'imagesnap')
    @cb_executable        = File.join(@cb_bin_dir, 'capture')
    @cb_projects_dir      = File.join(@cb_dir, 'projects')
    @cb_project_dir       = ensure_dir_present(File.join(@cb_projects_dir, @project_name))
    @commits_url          = ARGV.first || exit('No commit url given')
  end

  def capture
    # todo also upload old images that couldn't
    # upload because limited connectivity
    capture_tmp_image
    message = get_last_commit_message
    name, email = get_name_and_email
    upload_success = upload_to_board(:project_name => @project_name, :name => name, :message => message, :email => email)
    clean_uploaded_file if upload_success
  end

private
  def capture_tmp_image
    FileUtils.cd(@cb_project_dir)
    `#{@imagesnap_executable} -q -w 1 #{@snapshot_filename}`
    FileUtils.cd(@project_dir)
  end

  def get_last_commit_message
    message = `git log --format=%B -n 1 #{@commit_sha}`.strip
  end

  def get_name_and_email
    name  = `git config --get user.name`.strip
    email = `git config --get user.email`.strip
    [name, email]
  end

  def upload_to_board(opts)
    FileUtils.cd(@cb_project_dir)
    message = shellescape opts.fetch(:message)
    email   = shellescape opts.fetch(:email)
    name    = shellescape opts.fetch(:name)
    project_name = shellescape opts.fetch(:project_name)
    upload_response = `curl -s -F commit[project]= -F commit[email]=#{email} -F commit[name]=#{name} -F commit[message]=#{message} -F commit[image]=@#{@snapshot_filename} #{@commits_url}`

    if upload_response == 'ok'
      puts "Uploaded #{@commit_sha} to #{@commits_url}"
      return true
    else
      puts "Could not upload #{@commit_sha} to #{@commits_url}"
      return false
    end
  end

  def clean_uploaded_file
    FileUtils.rm @snapshot_filename
  end

  def ensure_dir_present(path)
    FileUtils.mkdir_p(path) unless File.directory?(path)
    path
  end

  # from http://svn.ruby-lang.org/repos/ruby/trunk/lib/shellwords.rb
  def shellescape(str)
    # An empty argument will be skipped, so return empty quotes.
    return "''" if str.empty?

    str = str.dup

    # Process as a single byte sequence because not all shell
    # implementations are multibyte aware.
    str.gsub!(/([^A-Za-z0-9_\-.,:\/@\n])/n, "\\\\\\1")

    # A LF cannot be escaped with a backslash because a backslash + LF
    # combo is regarded as line continuation and simply ignored.
    str.gsub!(/\n/, "'\n'")

    return str
  end
end

Capturer.new.capture
